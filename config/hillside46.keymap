/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&kp LEFT_SHIFT &kp Q  &kp W  &kp F  &kp P      &kp B                                                                                   &kp J        &kp L              &kp U      &kp Y    &kp SEMICOLON  &none
&kp MINUS      &kp A  &kp R  &kp S  &kp T      &kp G                                                                                   &kp M        &kp N              &kp E      &kp I    &kp O          &kp SINGLE_QUOTE
&kp UNDER      &kp Z  &kp X  &kp C  &kp D      &kp V        &tog 1                                              &none                 &kp K        &kp H              &kp COMMA  &kp DOT  &kp SLASH      &kp EQUAL
                                &lt 3 ESC  &lt 2 SPACE  &mt LEFT_COMMAND RETURN  &kp LCTRL    &kp RIGHT_ALT  &mt RIGHT_SHIFT BSPC  &lt 1 SPACE  &mt RCTL TAB
            >;
        };

        num {
            bindings = <
&kp K_VOL_UP &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT                                           &kp CARET  &kp AMPERSAND  &kp STAR  &kp LPAR  &kp RPAR  &trans
&kp K_VOL_DN &kp N1    &kp N2  &kp N3    &kp N4      &kp N5                                                &kp N6     &kp N7         &kp N8    &kp N9    &kp N0    &trans
&kp C_PP     &kp N6    &kp N7  &kp N8    &kp N9      &kp N0       &trans                           &trans  &kp F6     &kp F7         &kp F8    &kp F9    &kp F10   &trans
                                    &tog 1     &trans       &kp RA(ENTER)  &trans    &trans  &trans  &trans     &trans
            >;
        };

        meh {
            bindings = <
&none          &kp RS(RA(RC(Q)))  &kp RS(RA(RC(W)))  &kp UP_ARROW       &kp RS(RA(RC(P)))  &kp RS(RA(RC(B)))                                               &kp LA(LC(LS(J)))  &kp LS(LA(LC(L)))  &kp LS(LA(LC(U)))      &kp LS(LA(LC(Y)))    &kp LS(LA(LC(SEMICOLON)))  &none
&kp BACKSPACE  &kp RS(RA(RC(A)))  &kp LEFT           &kp DOWN           &kp RIGHT          &kp RS(RA(RC(G)))                                               &kp LS(LA(LC(M)))  &kp RS(RA(RC(N)))  &kp LS(LA(LC(E)))      &kp LS(LA(LC(I)))    &kp LS(LA(LC(O)))          &kp SINGLE_QUOTE
&kp UNDER      &kp RA(RC(RS(Z)))  &kp RA(RS(RC(X)))  &kp RS(RA(RC(C)))  &kp RS(RA(RC(D)))  &kp RS(RA(RC(V)))  &none                     &none              &kp LS(LA(LC(K)))  &kp LS(LA(LC(H)))  &kp LS(LA(LC(COMMA)))  &kp LS(LA(LC(DOT)))  &kp LS(LA(LC(SLASH)))      &kp EQUAL
                                                                        &trans             &trans             &trans  &trans    &trans  &kp LA(BACKSPACE)  &trans             &trans
            >;
        };

        sym {
            bindings = <
&trans  &kp TILDE  &kp HOME       &kp RS(UP_ARROW)  &kp END        &kp PIPE                                             &kp LBKT  &kp RBKT  &kp PLUS   &trans  &trans  &trans
&trans  &kp GRAVE  &kp RS(LEFT)   &kp RS(DOWN)      &kp RS(RIGHT)  &kp BSLH                                             &kp LPAR  &kp RPAR  &kp EQUAL  &trans  &trans  &trans
&trans  &trans     &kp RS(RG(X))  &trans            &trans         &kp RS(RA(RG(V)))  &trans                    &trans  &kp LBRC  &kp RBRC  &trans     &trans  &trans  &trans
                                                    &trans         &trans             &trans  &trans    &trans  &trans  &trans    &trans
            >;
        };
    };
};
